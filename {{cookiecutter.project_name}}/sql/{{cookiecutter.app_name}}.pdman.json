{
  "modules": [
    {
      "name": "md",
      "chnname": "主数据",
      "entities": [],
      "graphCanvas": {
        "nodes": [
          {
            "shape": "table",
            "title": "vas_md_workgroup",
            "moduleName": false,
            "x": 210,
            "y": 150,
            "id": "5e7e1555"
          },
          {
            "shape": "table",
            "title": "vas_md_workgroup:1",
            "moduleName": false,
            "x": 492.796875,
            "y": 123,
            "id": "46c44bcd"
          },
          {
            "shape": "table",
            "title": "vas_md_trade",
            "moduleName": false,
            "x": 191.796875,
            "y": 385,
            "id": "ebb1a6cc"
          },
          {
            "shape": "table",
            "title": "vas_md_labor",
            "moduleName": false,
            "x": 507.796875,
            "y": 360,
            "id": "7959b43b"
          },
          {
            "shape": "table",
            "title": "vas_md_cust",
            "moduleName": false,
            "x": 743.796875,
            "y": 167,
            "id": "d0fa1c19"
          }
        ],
        "edges": []
      },
      "associations": []
    },
    {
      "name": "conf",
      "chnname": "配置",
      "entities": [
        {
          "title": "working_calendar",
          "fields": [
            {
              "name": "ymd",
              "type": "Date",
              "remark": "",
              "chnname": "日期",
              "pk": true,
              "notNull": true
            },
            {
              "name": "date_type",
              "type": "DefaultString",
              "remark": "",
              "chnname": "日历类型"
            },
            {
              "name": "org_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构代码"
            },
            {
              "name": "revision",
              "type": "Integer",
              "remark": "",
              "chnname": "乐观锁",
              "defaultValue": "1"
            },
            {
              "name": "created_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "创建时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            },
            {
              "name": "updated_by",
              "type": "IdOrKey",
              "remark": "",
              "chnname": "更新人"
            },
            {
              "name": "updated_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "更新时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            }
          ],
          "indexs": [],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ],
          "chnname": "工作日历"
        }
      ],
      "graphCanvas": {
        "nodes": [
          {
            "shape": "table",
            "title": "working_calendar",
            "moduleName": false,
            "x": 188.796875,
            "y": 146,
            "id": "a0b320bd"
          },
          {
            "shape": "table",
            "title": "dict",
            "moduleName": "sys",
            "x": 544.796875,
            "y": 135,
            "id": "f49c34b5"
          },
          {
            "shape": "table",
            "title": "dict_item",
            "moduleName": "sys",
            "x": 210,
            "y": 370,
            "id": "4a15ddcf"
          }
        ],
        "edges": []
      },
      "associations": []
    },
    {
      "name": "biz",
      "chnname": "业务",
      "entities": [],
      "graphCanvas": {
        "nodes": [
          {
            "shape": "table",
            "title": "future_inbound_info",
            "moduleName": false,
            "x": 580,
            "y": 110,
            "id": "ab64e5bb"
          },
          {
            "shape": "table",
            "title": "processing_efficiency",
            "moduleName": false,
            "x": 230,
            "y": 370,
            "id": "d25c2eb7"
          },
          {
            "shape": "table",
            "title": "class_category",
            "moduleName": false,
            "x": 630,
            "y": 340,
            "id": "06005035"
          },
          {
            "shape": "table",
            "title": "future_processing_order",
            "moduleName": false,
            "x": 200,
            "y": 120,
            "id": "b689bb4d"
          },
          {
            "shape": "table",
            "title": "assign_working_period",
            "moduleName": false,
            "x": 127.02864017227978,
            "y": 605.7650300178263,
            "id": "0eb43f1e"
          },
          {
            "shape": "table",
            "title": "pull_data_history",
            "moduleName": false,
            "x": 984.3390227295397,
            "y": 87.02295096470368,
            "id": "ec738c9c"
          },
          {
            "shape": "table",
            "title": "forecast_result",
            "moduleName": false,
            "x": 990,
            "y": 360,
            "id": "45621284"
          },
          {
            "shape": "table",
            "title": "calculation_request",
            "moduleName": false,
            "x": 540,
            "y": 690,
            "id": "3900f5f1"
          },
          {
            "shape": "table",
            "title": "scheduling_sum",
            "moduleName": false,
            "x": -229.35904772681215,
            "y": 114.74199335685529,
            "id": "12098c5b"
          },
          {
            "shape": "table",
            "title": "outsource_detail",
            "moduleName": false,
            "x": -191.74034733746356,
            "y": 344.41405889182556,
            "id": "1cf3ad69"
          },
          {
            "shape": "table",
            "title": "outsource_sum",
            "moduleName": false,
            "x": -190,
            "y": 610,
            "id": "3d0beb3a"
          },
          {
            "shape": "table",
            "title": "customization_distinct",
            "moduleName": false,
            "x": -150,
            "y": 880,
            "id": "7379b09d"
          },
          {
            "shape": "table",
            "title": "real_outbound",
            "moduleName": false,
            "x": 250,
            "y": 950,
            "id": "9a52396f"
          },
          {
            "shape": "table",
            "title": "scheduling_output",
            "moduleName": false,
            "x": 960,
            "y": 610,
            "id": "3194a969"
          }
        ],
        "edges": []
      },
      "associations": []
    },
    {
      "name": "sys",
      "chnname": "系统",
      "entities": [
        {
          "title": "token_blacklist",
          "chnname": "黑名单",
          "fields": [
            {
              "name": "id",
              "type": "Integer",
              "chnname": "主键",
              "remark": "",
              "pk": true,
              "notNull": true,
              "autoIncrement": true,
              "defaultValue": ""
            },
            {
              "name": "jti",
              "type": "LongKey",
              "chnname": "jti",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "token_type",
              "type": "DefaultString",
              "chnname": "类型",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "user_id",
              "type": "DefaultString",
              "chnname": "用户id",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "revoked",
              "type": "TINYINT",
              "chnname": "是否",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "expires",
              "type": "DateTime",
              "chnname": "过期时间",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            }
          ],
          "indexs": [],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ]
        },
        {
          "title": "dict",
          "fields": [
            {
              "name": "id",
              "type": "Integer",
              "remark": "",
              "chnname": "主键",
              "autoIncrement": true,
              "pk": true,
              "notNull": true
            },
            {
              "name": "dict_name",
              "type": "DefaultString",
              "remark": "",
              "chnname": "字典名称"
            },
            {
              "name": "dict_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "字典编码"
            },
            {
              "name": "description",
              "type": "ShortString",
              "remark": "",
              "chnname": "描述"
            },
            {
              "name": "is_valid",
              "type": "TINYINT",
              "remark": "1启用 0不启用",
              "chnname": "是否有效",
              "defaultValue": "1"
            },
            {
              "name": "org_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构代码"
            },
            {
              "name": "created_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "创建时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            },
            {
              "name": "updated_by",
              "type": "IdOrKey",
              "remark": "",
              "chnname": "更新人"
            },
            {
              "name": "updated_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "更新时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            }
          ],
          "indexs": [
            {
              "name": "indextable_dict_code",
              "isUnique": true,
              "fields": [
                "dict_code"
              ]
            }
          ],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ],
          "chnname": "字典表"
        },
        {
          "title": "dict_item",
          "fields": [
            {
              "name": "id",
              "type": "Integer",
              "remark": "",
              "chnname": "主键",
              "pk": true,
              "notNull": true
            },
            {
              "name": "dict_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "字典编码",
              "pk": false,
              "notNull": false
            },
            {
              "name": "item_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "项编码",
              "pk": false,
              "notNull": false
            },
            {
              "name": "item_name",
              "type": "DefaultString",
              "remark": "",
              "chnname": "项名称"
            },
            {
              "name": "sort_order",
              "type": "Integer",
              "remark": "",
              "chnname": "排序"
            },
            {
              "name": "description",
              "type": "ShortString",
              "remark": "",
              "chnname": "描述"
            },
            {
              "name": "is_valid",
              "type": "TINYINT",
              "remark": "1启用 0不启用",
              "chnname": "是否有效",
              "defaultValue": "1"
            },
            {
              "name": "org_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构代码"
            },
            {
              "name": "created_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "创建时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            },
            {
              "name": "updated_by",
              "type": "IdOrKey",
              "remark": "",
              "chnname": "更新人"
            },
            {
              "name": "updated_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "更新时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            }
          ],
          "indexs": [
            {
              "name": "dict_item_code_uk",
              "isUnique": true,
              "fields": [
                "item_code",
                "dict_code"
              ]
            }
          ],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ],
          "chnname": "字典明细"
        },
        {
          "title": "user",
          "chnname": "账号表",
          "fields": [
            {
              "name": "id",
              "type": "Integer",
              "remark": "",
              "chnname": "主键",
              "pk": true,
              "notNull": true,
              "autoIncrement": true
            },
            {
              "name": "emp_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "工号",
              "pk": false,
              "notNull": false
            },
            {
              "name": "emp_name",
              "type": "DefaultString",
              "remark": "",
              "chnname": "员工姓名"
            },
            {
              "name": "wg_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "组别"
            },
            {
              "name": "wh_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "仓库"
            },
            {
              "name": "emp_status",
              "type": "TINYINT",
              "remark": "",
              "chnname": "状态"
            },
            {
              "name": "username",
              "type": "LongKey",
              "chnname": "用户名",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "email",
              "type": "ShortString",
              "chnname": "邮箱",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "password",
              "type": "ShortString",
              "chnname": "密码",
              "remark": "",
              "pk": false,
              "notNull": true,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "roles",
              "type": "DefaultString",
              "remark": "",
              "chnname": "角色"
            },
            {
              "name": "active",
              "type": "TINYINT",
              "chnname": "是否激活",
              "remark": "",
              "pk": false,
              "notNull": false,
              "autoIncrement": false,
              "defaultValue": ""
            },
            {
              "name": "avatar",
              "type": "ShortString",
              "remark": "",
              "chnname": "头像"
            },
            {
              "name": "introduction",
              "type": "DefaultString",
              "remark": "",
              "chnname": "介绍"
            },
            {
              "name": "org_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构代码",
              "defaultValue": "'vx'"
            }
          ],
          "indexs": [
            {
              "name": "username_udx",
              "isUnique": true,
              "fields": [
                "username"
              ]
            }
          ],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ]
        },
        {
          "title": "org",
          "fields": [
            {
              "name": "org_id",
              "type": "Integer",
              "remark": "",
              "chnname": "机构id",
              "pk": true,
              "notNull": true,
              "autoIncrement": true
            },
            {
              "name": "org_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构代码"
            },
            {
              "name": "org_name",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构名称"
            },
            {
              "name": "revision",
              "type": "Integer",
              "remark": "",
              "chnname": "乐观锁",
              "defaultValue": "1"
            },
            {
              "name": "created_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "创建时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            },
            {
              "name": "updated_by",
              "type": "IdOrKey",
              "remark": "",
              "chnname": "更新人"
            },
            {
              "name": "updated_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "更新时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            }
          ],
          "indexs": [
            {
              "name": "org_udx",
              "isUnique": true,
              "fields": [
                "org_code"
              ]
            }
          ],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ],
          "chnname": "机构表"
        },
        {
          "title": "pull_data_history",
          "fields": [
            {
              "name": "id",
              "type": "Integer",
              "remark": "",
              "chnname": "主键",
              "pk": true,
              "notNull": true,
              "autoIncrement": true,
              "uiHint": "Number"
            },
            {
              "name": "table_name",
              "type": "DefaultString",
              "remark": "",
              "chnname": "表名"
            },
            {
              "name": "pull_count",
              "type": "Integer",
              "remark": "",
              "chnname": "获取数量"
            },
            {
              "name": "save_count",
              "type": "Integer",
              "remark": "",
              "chnname": "保存数量"
            },
            {
              "name": "task_id",
              "type": "LongKey",
              "remark": "",
              "chnname": "任务id"
            },
            {
              "name": "cost_time",
              "type": "float_short",
              "remark": "",
              "chnname": "耗时"
            },
            {
              "name": "org_code",
              "type": "DefaultString",
              "remark": "",
              "chnname": "机构代码"
            },
            {
              "name": "revision",
              "type": "Integer",
              "remark": "",
              "chnname": "乐观锁",
              "defaultValue": "1"
            },
            {
              "name": "created_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "创建时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            },
            {
              "name": "updated_by",
              "type": "IdOrKey",
              "remark": "",
              "chnname": "更新人"
            },
            {
              "name": "updated_time",
              "type": "DateTime",
              "remark": "",
              "chnname": "更新时间",
              "defaultValue": "CURRENT_TIMESTAMP"
            }
          ],
          "indexs": [],
          "headers": [
            {
              "fieldName": "chnname",
              "relationNoShow": false
            },
            {
              "fieldName": "name",
              "relationNoShow": false
            },
            {
              "fieldName": "type",
              "relationNoShow": false
            },
            {
              "fieldName": "dataType",
              "relationNoShow": true
            },
            {
              "fieldName": "remark",
              "relationNoShow": true
            },
            {
              "fieldName": "pk",
              "relationNoShow": false
            },
            {
              "fieldName": "notNull",
              "relationNoShow": true
            },
            {
              "fieldName": "autoIncrement",
              "relationNoShow": true
            },
            {
              "fieldName": "defaultValue",
              "relationNoShow": true
            },
            {
              "fieldName": "relationNoShow",
              "relationNoShow": true
            },
            {
              "fieldName": "uiHint",
              "relationNoShow": true
            }
          ],
          "chnname": "拉取数据历史表"
        }
      ],
      "graphCanvas": {
        "nodes": [
          {
            "shape": "table",
            "title": "token_blacklist",
            "moduleName": false,
            "x": 310.796875,
            "y": 117,
            "id": "b917f3c4"
          },
          {
            "shape": "table",
            "title": "user",
            "moduleName": false,
            "x": 648.796875,
            "y": 159,
            "id": "80e277a5"
          }
        ],
        "edges": []
      },
      "associations": []
    }
  ],
  "dataTypeDomains": {
    "datatype": [
      {
        "name": "默认字串",
        "code": "DefaultString",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(32)"
          },
          "ORACLE": {
            "type": "NVARCHAR2(32)"
          },
          "SQLServer": {
            "type": "NVARCHAR(32)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(32)"
          }
        }
      },
      {
        "name": "标识号",
        "code": "IdOrKey",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "ORACLE": {
            "type": "VARCHAR2(32)"
          },
          "MYSQL": {
            "type": "VARCHAR(32)"
          },
          "SQLServer": {
            "type": "VARCHAR(32)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(32)"
          }
        }
      },
      {
        "name": "标识号-长",
        "code": "LongKey",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(64)"
          },
          "ORACLE": {
            "type": "VARCHAR2(64)"
          },
          "JAVA": {
            "type": "String"
          },
          "SQLServer": {
            "type": "VARCHAR(64)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(64)"
          }
        }
      },
      {
        "name": "名称",
        "code": "Name",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(128)"
          },
          "ORACLE": {
            "type": "NVARCHAR2(128)"
          },
          "SQLServer": {
            "type": "NVARCHAR(128)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(128)"
          }
        }
      },
      {
        "name": "备注说明",
        "code": "Intro",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(512)"
          },
          "ORACLE": {
            "type": "NVARCHAR2(512)"
          },
          "SQLServer": {
            "type": "NVARCHAR(512)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(512)"
          }
        }
      },
      {
        "name": "字串-短",
        "code": "ShortString",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(128)"
          },
          "ORACLE": {
            "type": "NVARCHAR2(128)"
          },
          "SQLServer": {
            "type": "NVARCHAR(128)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(128)"
          }
        }
      },
      {
        "name": "字串-中",
        "code": "MiddleString",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(1024)"
          },
          "ORACLE": {
            "type": "NVARCHAR2(1024)"
          },
          "SQLServer": {
            "type": "NVARCHAR(1024)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(1024)"
          }
        }
      },
      {
        "name": "字串-长",
        "code": "LongString",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "ORACLE": {
            "type": "NVARCHAR2(3072)"
          },
          "MYSQL": {
            "type": "VARCHAR(3072)"
          },
          "SQLServer": {
            "type": "NVARCHAR(3072)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(3072)"
          }
        }
      },
      {
        "name": "大文本",
        "code": "LongText",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "TEXT"
          },
          "ORACLE": {
            "type": "CLOB"
          },
          "SQLServer": {
            "type": "NTEXT"
          },
          "PostgreSQL": {
            "type": "TEXT"
          }
        }
      },
      {
        "name": "小数",
        "code": "Double",
        "apply": {
          "JAVA": {
            "type": "Double"
          },
          "MYSQL": {
            "type": "DECIMAL(32,10)"
          },
          "ORACLE": {
            "type": "NUMBER(32,10)"
          },
          "SQLServer": {
            "type": "DECIMAL(32,10)"
          },
          "PostgreSQL": {
            "type": "DECIMAL(32,10)"
          }
        }
      },
      {
        "name": "比例",
        "code": "Ratio",
        "apply": {
          "MYSQL": {
            "type": "DECIMAL(4,2)"
          },
          "JAVA": {
            "type": "Double"
          },
          "ORACLE": {
            "type": "NUMBER(4,2)"
          },
          "SQLServer": {
            "type": "DECIMAL(4,2)"
          },
          "PostgreSQL": {
            "type": "DECIMAL(4,2)"
          }
        }
      },
      {
        "name": "整数",
        "code": "Integer",
        "apply": {
          "JAVA": {
            "type": "Integer"
          },
          "MYSQL": {
            "type": "INT"
          },
          "ORACLE": {
            "type": "INT"
          },
          "SQLServer": {
            "type": "INT"
          },
          "PostgreSQL": {
            "type": "INT"
          }
        }
      },
      {
        "name": "大整数",
        "code": "BigInt",
        "apply": {
          "MYSQL": {
            "type": "BIGINT"
          },
          "JAVA": {
            "type": "Long"
          },
          "ORACLE": {
            "type": "NUMBER"
          },
          "SQLServer": {
            "type": "BIGINT"
          },
          "PostgreSQL": {
            "type": "BIGINT"
          }
        }
      },
      {
        "name": "金额",
        "code": "Money",
        "apply": {
          "JAVA": {
            "type": "Double"
          },
          "MYSQL": {
            "type": "DECIMAL(32,8)"
          },
          "ORACLE": {
            "type": "NUMBER(32,8)"
          },
          "SQLServer": {
            "type": "DECIMAL(32,8)"
          },
          "PostgreSQL": {
            "type": "DECIMAL(32,8)"
          }
        }
      },
      {
        "name": "是否",
        "code": "YesNo",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(1)"
          },
          "ORACLE": {
            "type": "VARCHAR2(1)"
          },
          "SQLServer": {
            "type": "VARCHAR(1)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(1)"
          }
        }
      },
      {
        "name": "数据字典",
        "code": "Dict",
        "apply": {
          "JAVA": {
            "type": "String"
          },
          "MYSQL": {
            "type": "VARCHAR(32)"
          },
          "ORACLE": {
            "type": "VARCHAR2(32)"
          },
          "SQLServer": {
            "type": "VARCHAR(32)"
          },
          "PostgreSQL": {
            "type": "VARCHAR(32)"
          }
        }
      },
      {
        "name": "日期",
        "code": "Date",
        "apply": {
          "JAVA": {
            "type": "Date"
          },
          "MYSQL": {
            "type": "DATE"
          },
          "ORACLE": {
            "type": "DATE"
          },
          "SQLServer": {
            "type": "DATE"
          },
          "PostgreSQL": {
            "type": "DATE"
          }
        }
      },
      {
        "name": "时间",
        "code": "time",
        "apply": {
          "MYSQL": {
            "type": "TIME"
          }
        }
      },
      {
        "name": "日期时间",
        "code": "DateTime",
        "apply": {
          "JAVA": {
            "type": "Date"
          },
          "MYSQL": {
            "type": "DATETIME"
          },
          "ORACLE": {
            "type": "DATE"
          },
          "SQLServer": {
            "type": "DATE"
          },
          "PostgreSQL": {
            "type": "DATE"
          }
        }
      },
      {
        "name": "日期字符",
        "code": "str",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(10)"
          }
        }
      },
      {
        "name": "单字符",
        "code": "Char",
        "apply": {
          "MYSQL": {
            "type": "CHAR(1)"
          },
          "ORACLE": {
            "type": "CHAR(1)"
          },
          "JAVA": {
            "type": "String"
          },
          "SQLServer": {
            "type": "CHAR(1)"
          },
          "PostgreSQL": {
            "type": "CHAR(1)"
          }
        }
      },
      {
        "name": "短int",
        "code": "TINYINT",
        "apply": {
          "MYSQL": {
            "type": "TINYINT"
          }
        }
      },
      {
        "code": "smallString",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(16)"
          }
        },
        "name": "字串超短"
      },
      {
        "name": "小时数",
        "code": "float",
        "apply": {
          "MYSQL": {
            "type": "DECIMAL(7,3)"
          }
        }
      },
      {
        "name": "uuid",
        "code": "uuid",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(36)"
          }
        }
      },
      {
        "name": "字串极短",
        "code": "tinyString",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(8)"
          }
        }
      },
      {
        "name": "浮点数-短",
        "code": "float_short",
        "apply": {
          "MYSQL": {
            "type": "decimal(7,2)"
          }
        }
      },
      {
        "name": "BIT_1",
        "code": "BIT_1",
        "apply": {
          "MYSQL": {
            "type": "BIT(1)"
          }
        }
      },
      {
        "name": "INT_10",
        "code": "INT_10",
        "apply": {
          "MYSQL": {
            "type": "INT(10)"
          }
        }
      },
      {
        "name": "VARCHAR_10",
        "code": "VARCHAR_10",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(10)"
          }
        }
      },
      {
        "name": "VARCHAR_255",
        "code": "VARCHAR_255",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(255)"
          }
        }
      },
      {
        "name": "VARCHAR_36",
        "code": "VARCHAR_36",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(36)"
          }
        }
      },
      {
        "name": "VARCHAR_80",
        "code": "VARCHAR_80",
        "apply": {
          "MYSQL": {
            "type": "VARCHAR(80)"
          }
        }
      },
      {
        "name": "BIGINT_19",
        "code": "BIGINT_19",
        "apply": {
          "MYSQL": {
            "type": "BIGINT(19)"
          }
        }
      },
      {
        "name": "TINYINT_3",
        "code": "TINYINT_3",
        "apply": {
          "MYSQL": {
            "type": "TINYINT(3)"
          }
        }
      }
    ],
    "database": [
      {
        "code": "MYSQL",
        "template": "DROP TABLE {{=it.entity.title}};\n$blankline\nCREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}} {{= field.pk ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.entity.chnname,it.entity.remark,';') }}'",
        "fileShow": true,
        "defaultDatabase": true,
        "createTableTemplate": "CREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} {{= field.autoIncrement ? 'AUTO_INCREMENT' : '' }} {{= field.defaultValue ? it.func.join('DEFAULT',field.defaultValue,' ') : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,' ')}}' {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.entity.chnname,it.entity.remark,' ') }}';{{=it.separator}}\n$blankline\n",
        "deleteTableTemplate": "DROP TABLE {{=it.entity.title}};{{=it.separator}}/*SkipError*/",
        "rebuildTableTemplate": "create table PDMAN_UP_{{=it.oldEntity.title}}\nas select * from {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\nCREATE TABLE {{=it.newEntity.title}}(\n{{ pkList = [] ; }}\n{{~it.newEntity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.newEntity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.newEntity.chnname,it.newEntity.remark,';') }}';{{=it.separator}}\n$blankline\n\n{{ sameCols = it.func.intersect(it.newEntity.fields,it.oldEntity.fields) ;}}\ninsert into {{=it.newEntity.title}}(\n{{~sameCols:field:index}}\n    {{=field.name}}{{? index<sameCols.length-1}},{{?}}\n{{~}}\n) \nselect \n{{~sameCols:field:index}}\n    {{=field.name}}{{? index<sameCols.length-1}},{{?}}\n{{~}}\nfrom PDMAN_UP_{{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table PDMAN_UP_{{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n{{~it.newEntity.indexs:index}}\nALTER TABLE {{=it.newEntity.title}} ADD {{? index.isUnique}}UNIQUE{{??}}INDEX{{?}} {{=index.name}}({{=it.func.join(...index.fields,',')}});{{=it.separator}}\n{{~}}",
        "createFieldTemplate": "ALTER TABLE {{=it.entity.title}} ADD COLUMN {{=it.field.name}} {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}'{{=it.field.defaultValue}}'{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.pk}}PRIMARY KEY{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}} {{? it.field.addAfter}}AFTER {{=it.field.addAfter}}{{?}};{{=it.separator}}",
        "updateFieldTemplate": "ALTER TABLE {{=it.entity.title}} MODIFY COLUMN {{=it.field.name}} {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}'{{=it.field.defaultValue}}'{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}};{{=it.separator}}",
        "deleteFieldTemplate": "ALTER TABLE {{=it.entity.title}} DROP {{=it.field.name}};{{=it.separator}}",
        "deleteIndexTemplate": "ALTER TABLE {{=it.entity.title}} DROP INDEX {{=it.index.name}};{{=it.separator}}",
        "createIndexTemplate": "ALTER TABLE {{=it.entity.title}} ADD {{? it.index.isUnique}}UNIQUE{{??}}INDEX{{?}} {{=it.index.name}}({{=it.func.join(...it.index.fields,',')}});{{=it.separator}}",
        "updateTableComment": "ALTER TABLE {{=it.entity.title}} COMMENT '{{=it.entity.chnname}}';{{=it.separator}}"
      },
      {
        "code": "ORACLE",
        "template": "DROP TABLE {{=it.entity.title}};{{=it.separator}}\n$blankline\nCREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}}  {{= field.pk ? 'NOT NULL' : '' }} {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n);{{=it.separator}}\n$blankline\nCOMMENT ON TABLE {{=it.entity.title}} IS '{{=it.func.join(it.entity.chnname,it.entity.remark,';') }}';{{=it.separator}}\n{{~it.entity.fields:field:index}}\nCOMMENT ON COLUMN {{=it.entity.title}}.{{=field.name}} IS '{{=it.func.join(field.chnname,field.remark,';')}}';{{=it.separator}}\n{{~}}",
        "createTableTemplate": "CREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}}{{? field.defaultValue}} DEFAULT {{=field.defaultValue}}{{?}}{{= field.notNull ? ' NOT NULL' : '' }}{{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n);{{=it.separator}}\n$blankline\n{{? it.entity.chnname || it.entity.remark}}COMMENT ON TABLE {{=it.entity.title}} IS {{? it.entity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.entity.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~it.entity.fields:field:index}}\n{{? field.chnname || field.remark}}COMMENT ON COLUMN {{=it.entity.title}}.{{=field.name}} IS {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~}}",
        "deleteTableTemplate": "DROP TABLE {{=it.entity.title}};{{=it.separator}}/*SkipError*/\r\n$blankline",
        "rebuildTableTemplate": "CREATE TABLE PDMAN_UP_{{=it.oldEntity.title}}\nAS SELECT * FROM {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\nDROP TABLE {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\nCREATE TABLE {{=it.newEntity.title}}(\n{{ pkList = [] ; }}{{~it.newEntity.fields:field:index}}{{? field.pk }}{{ pkList.push(field.name) }}{{?}}    {{=field.name}} {{=field.type}}{{? field.defaultValue}} DEFAULT {{=field.defaultValue}}{{?}}{{= field.notNull ? ' NOT NULL' : '' }}{{= index < it.newEntity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}{{? pkList.length >0 }}    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}}){{?}}\n);{{=it.separator}}\n$blankline\n{{? it.newEntity.chnname || it.newEntity.remark}}COMMENT ON TABLE {{=it.newEntity.title}} IS {{? it.newEntity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.newEntity.chnname}}'{{?}};{{?}}{{=it.separator}}\n{{~it.newEntity.fields:field:index}}\n{{? field.chnname || field.remark}}COMMENT ON COLUMN {{=it.newEntity.title}}.{{=field.name}} IS {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}};{{?}}{{=it.separator}}\n{{~}}\n{{ sameCols = it.func.intersect(it.newEntity.fields,it.oldEntity.fields) ;}}\n$blankline\nINSERT INTO {{=it.newEntity.title}}(\n{{~sameCols:field:index}}   {{=field.name}}{{? index<sameCols.length-1}},{{?}}\n{{~}}) \nSELECT\n{{~sameCols:field:index}}   {{=field.name}}{{? index<sameCols.length-1}},{{?}}\n{{~}}FROM PDMAN_UP_{{=it.oldEntity.title}};{{=it.separator}}\n\nDROP TABLE PDMAN_UP_{{=it.oldEntity.title}};{{=it.separator}}\n{{~it.newEntity.indexs:index}}\nCREATE{{? index.isUnique}} UNIQUE{{?}} INDEX {{=index.name}} ON {{=it.newEntity.title}}({{=it.func.join(index.fields,',')}});{{=it.separator}}\n{{~}}",
        "createFieldTemplate": "ALTER TABLE {{=it.entity.title}} ADD({{=it.field.name}} {{=it.field.type}}{{? it.field.defaultValue}} DEFAULT {{=it.field.defaultValue}}{{?}}{{? it.field.notNull}} NOT NULL{{?}});{{=it.separator}}\r\n{{? it.field.chnname || it.field.remark}}COMMENT ON COLUMN {{=it.entity.title}}.{{=it.field.name}} IS {{? it.field.remark}}'{{=it.field.remark}}'{{??}}'{{=it.field.chnname}}'{{?}};{{=it.separator}}{{?}}\r\n$blankline",
        "updateFieldTemplate": "ALTER TABLE {{=it.entity.title}} MODIFY({{=it.field.name}} {{=it.field.type}}{{? it.field.defaultValue}} DEFAULT {{=it.field.defaultValue}}{{?}}{{? it.field.notNull}} NOT NULL{{?}});{{=it.separator}}\r\n{{? it.field.chnname || it.field.remark}}COMMENT ON COLUMN {{=it.entity.title}}.{{=it.field.name}} IS {{? it.field.remark}}'{{=it.field.remark}}'{{??}}'{{=it.field.chnname}}'{{?}};{{=it.separator}}{{=it.separator}}{{?}}\r\n$blankline",
        "deleteFieldTemplate": "ALTER TABLE {{=it.entity.title}} DROP({{=it.field.name}});{{=it.separator}}\r\n$blankline",
        "deleteIndexTemplate": "DROP INDEX {{=it.entity.title}}.{{=it.index.name}};{{=it.separator}}\r\n$blankline",
        "createIndexTemplate": "CREATE{{? it.index.isUnique}} UNIQUE{{?}} INDEX {{=it.index.name}} ON {{=it.entity.title}}({{=it.func.join(it.index.fields,',')}});{{=it.separator}}\r\n$blankline",
        "updateTableComment": "{{? it.entity.chnname || it.entity.remark}}COMMENT ON TABLE {{=it.entity.title}} IS {{? it.entity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.entity.chnname}}'{{?}};{{=it.separator}}{{?}}\r\n$blankline"
      },
      {
        "code": "SQLServer",
        "createTableTemplate": "CREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} {{= field.autoIncrement ? 'IDENTITY(1,1)' : '' }} {{= field.defaultValue ? it.func.join('DEFAULT',field.defaultValue,' ') : '' }}  {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    CONSTRAINT PK_{{=it.entity.title}} PRIMARY KEY CLUSTERED ({{~pkList:pkName:i}}{{= pkName }} ASC {{= i<pkList.length-1 ? ',' : '' }}{{~}}) ON [PRIMARY] \n{{?}}\n) ;{{=it.separator}}\n\n$blankline\nEXECUTE sp_addextendedproperty N'MS_Description', '{{= it.entity.chnname || it.entity.remark}}', N'user', N'dbo', N'table', N'{{=it.entity.title}}', NULL, NULL;{{=it.separator}}\n{{~it.entity.fields:field:index}}\n{{? field.chnname || field.remark}}EXECUTE sp_addextendedproperty N'MS_Description', {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}}, N'user', N'dbo', N'table', N'{{=it.entity.title}}', N'column', N'{{=field.name}}';{{=it.separator}}{{?}}\n{{~}}\n",
        "deleteTableTemplate": "",
        "rebuildTableTemplate": "",
        "createFieldTemplate": "",
        "updateFieldTemplate": "",
        "deleteFieldTemplate": "",
        "deleteIndexTemplate": "",
        "createIndexTemplate": "",
        "updateTableComment": ""
      },
      {
        "code": "PostgreSQL",
        "template": "DROP TABLE {{=it.entity.title}};\n$blankline\nCREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}} {{= field.pk ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.entity.chnname,it.entity.remark,';') }}'",
        "createTableTemplate": "CREATE TABLE {{=it.entity.title}}(\n{{ pkList = [] ; }}\n{{~it.entity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}}{{? field.defaultValue}} DEFAULT {{=field.defaultValue}}{{?}}{{= field.notNull ? ' NOT NULL' : '' }}{{= index < it.entity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n);{{=it.separator}}\n$blankline\n{{? it.entity.chnname || it.entity.remark}}COMMENT ON TABLE {{=it.entity.title}} IS {{? it.entity.remark}}'{{=it.entity.remark}}'{{??}}'{{=it.entity.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~it.entity.fields:field:index}}\n{{? field.chnname || field.remark}}COMMENT ON COLUMN {{=it.entity.title}}.{{=field.name}} IS {{? field.remark}}'{{=field.remark}}'{{??}}'{{=field.chnname}}'{{?}};{{=it.separator}}{{?}}\n{{~}}",
        "deleteTableTemplate": "DROP TABLE {{=it.entity.title}};{{=it.separator}}/*SkipError*/",
        "rebuildTableTemplate": "create table PDMAN_UP_{{=it.oldEntity.title}}\nas select * from {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table {{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\nCREATE TABLE {{=it.newEntity.title}}(\n{{ pkList = [] ; }}\n{{~it.newEntity.fields:field:index}}\n    {{? field.pk }}{{ pkList.push(field.name) }}{{?}}\n    {{=field.name}} {{=field.type}} {{= field.notNull ? 'NOT NULL' : '' }} COMMENT '{{=it.func.join(field.chnname,field.remark,';')}}' {{= index < it.newEntity.fields.length-1 ? ',' : ( pkList.length>0 ? ',' :'' ) }}\n{{~}}\n{{? pkList.length >0 }}\n    PRIMARY KEY ({{~pkList:pkName:i}}{{= pkName }}{{= i<pkList.length-1 ? ',' : '' }}{{~}})\n{{?}}\n) COMMENT = '{{=it.func.join(it.newEntity.chnname,it.newEntity.remark,';') }}';{{=it.separator}}\n$blankline\n\n{{ sameCols = it.func.intersect(it.newEntity.fields,it.oldEntity.fields) ;}}\ninsert into {{=it.newEntity.title}}(\n{{~sameCols:field:index}}\n    {{=field.name}}{{? index<sameCols.length-1}},{{?}}\n{{~}}\n) \nselect \n{{~sameCols:field:index}}\n    {{=field.name}}{{? index<sameCols.length-1}},{{?}}\n{{~}}\nfrom PDMAN_UP_{{=it.oldEntity.title}};{{=it.separator}}\n$blankline\n\ndrop table PDMAN_UP_{{=it.oldEntity.title}};{{=it.separator}}",
        "createFieldTemplate": "ALTER TABLE {{=it.entity.title}} ADD COLUMN {{=it.field.name}} {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}'{{=it.field.defaultValue}}'{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.pk}}PRIMARY KEY{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}} {{? it.field.addAfter}}AFTER {{=it.field.addAfter}}{{?}};{{=it.separator}}",
        "updateFieldTemplate": "ALTER TABLE {{=it.entity.title}} MODIFY COLUMN {{=it.field.name}} {{=it.field.type}} {{? it.field.notNull}}NOT NULL{{?}} {{? it.field.defaultValue}}DEFAULT {{? null==it.field.defaultValue}}NULL{{??}}'{{=it.field.defaultValue}}'{{?}}{{?}} {{? it.field.autoIncrement}}AUTO_INCREMENT{{?}} {{? it.field.chnname}}COMMENT '{{=it.field.chnname}}'{{?}};{{=it.separator}}",
        "deleteFieldTemplate": "ALTER TABLE {{=it.entity.title}} DROP {{=it.field.name}};{{=it.separator}}",
        "deleteIndexTemplate": "ALTER TABLE {{=it.entity.title}} DROP INDEX {{=it.index.name}};{{=it.separator}}",
        "createIndexTemplate": "ALTER TABLE {{=it.entity.title}} ADD {{? it.index.isUnique}}UNIQUE{{??}}INDEX{{?}} {{=it.index.name}}({{=it.func.join(...it.index.fields,',')}});{{=it.separator}}",
        "updateTableComment": "ALTER TABLE {{=it.entity.title}} COMMENT '{{=it.entity.chnname}}';{{=it.separator}}"
      },
      {
        "code": "JAVA",
        "template": "package group.rober.pdman.{{=it.module.name}}.entity;\n$blankline\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Date;\n$blankline\n$blankline\n\n/** {{=it.entity.chnname}} */\n@Table(name=\"{{=it.entity.title}}\")\npublic class {{=it.func.camel(it.entity.title,true) }} implements Serializable,Cloneable{\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    {{? field.pk }}\n    @Id\n    @GeneratedValue\n    {{?}}\n    private {{=field.type}} {{=it.func.camel(field.name,false)}} ;\n{{~}}\n$blankline\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public {{=field.type}} get{{=it.func.camel(field.name,true)}}(){\n        return this.{{=it.func.camel(field.name,false)}};\n    }\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public void set{{=it.func.camel(field.name,true)}}({{=field.type}} {{= it.func.camel(field.name,false) }}){\n        this.{{=it.func.camel(field.name,false)}} = {{= it.func.camel(field.name,false) }};\n    }\n{{~}}\n}",
        "createTableTemplate": "package group.rober.pdman.{{=it.module.name}}.entity;\n$blankline\nimport javax.persistence.*;\nimport java.io.Serializable;\nimport java.util.Date;\n$blankline\n$blankline\n@Table(name=\"{{=it.entity.title}}\")\npublic class {{=it.func.camel(it.entity.title,true) }} implements Serializable,Cloneable{\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    {{? field.pk }}\n    @Id\n    @GeneratedValue\n    {{?}}\n    private {{=field.type}} {{=it.func.camel(field.name,false)}} ;\n{{~}}\n$blankline\n{{~it.entity.fields:field:index}}\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public {{=field.type}} get{{=it.func.camel(field.name,true)}}(){\n        return this.{{=it.func.camel(field.name,false)}};\n    }\n    /** {{=it.func.join(field.chnname,field.remark,';')}} */\n    public void set{{=it.func.camel(field.name,true)}}({{=field.type}} {{= it.func.camel(field.name,false) }}){\n        this.{{=it.func.camel(field.name,false)}} = {{= it.func.camel(field.name,false) }};\n    }\n{{~}}\n}",
        "deleteTableTemplate": "",
        "rebuildTableTemplate": "",
        "createFieldTemplate": "",
        "updateFieldTemplate": "",
        "deleteFieldTemplate": "",
        "deleteIndexTemplate": "",
        "createIndexTemplate": "",
        "updateTableComment": ""
      },
      {
        "code": "Python",
        "createTableTemplate": "import logging\nfrom flask import request, Blueprint\nfrom flask_restful import Resource\nfrom flask_jwt_extended import jwt_required, current_user\nfrom sqlalchemy import text\n$blankline\n{{ \nvar tmp = it.entity.title;\nvar titleLower = tmp.substr(tmp.indexOf(\"_\", tmp.indexOf(\"_\")+1)+1);\n\n}}\nfrom vas.commons import db_util\nfrom vas.commons.constants import return_code\nfrom vas.models.{{=titleLower}} import {{=it.func.camel(titleLower,true) }}\nfrom vas.extensions import ma, db\nfrom vas.commons.pagination import paginate\nfrom marshmallow import fields\nimport flask_excel as excel\n$blankline\nlogger = logging.getLogger(__name__)\n$blankline\n\n{{=titleLower}}_bp = Blueprint('{{=titleLower}}', __name__, url_prefix='/api/v1')\n$blankline\n$blankline\nclass {{=it.func.camel(titleLower,true) }}Schema(ma.SQLAlchemySchema):\n{{~it.entity.fields:field:index}}\n    {{=it.func.lowerCase(field.name)}} = fields.String(data_key='{{=it.func.camel(field.name)}}')\n{{~}}\n$blankline\n    class Meta:\n        model = {{=it.func.camel(titleLower,true) }}\n        load_instance = True\n        sqla_session = db.session\n\n$blankline\n$blankline\nclass {{=it.func.camel(titleLower,true) }}Resource(Resource):\n    \"\"\"{{=it.entity.chnname}} resource\n\n    ---\n    get:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  {{=titleLower}}: {{=it.func.camel(titleLower,true) }}Schema\n        404:\n          description: {{=titleLower}} does not exists\n    put:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              {{=it.func.camel(titleLower,true) }}Schema\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{=titleLower}} updated\n                  {{=titleLower}}: {{=it.func.camel(titleLower,true) }}Schema\n        404:\n          description: {{=titleLower}} not exists\n    delete:\n      tags:\n        - api\n      parameters:\n        - in: path\n          name: id\n          schema:\n            type: string\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{=titleLower}} deleted\n        404:\n          description: {{=titleLower}} does not exists\n    \"\"\"\n    method_decorators = [jwt_required]\n$blankline\n\n    def get(self, id):\n        schema = {{=it.func.camel(titleLower,true) }}Schema(unknown=True,)\n        {{=titleLower}} = {{=it.func.camel(titleLower,true) }}.query.get(id)\n        if {{=titleLower}}:\n            ret = schema.dump({{=titleLower}}.__dict__)\n            return return_code.SUCCESS.set_data(ret).d, 200\n        else:\n            return return_code.NOT_FOUND.d, 200\n$blankline\n\n    def put(self, id):\n        session = db.session\n        schema = {{=it.func.camel(titleLower,true) }}Schema(unknown=True, partial=True)\n        # {{=titleLower}} = {{=it.func.camel(titleLower,true) }}.query.get(id)\n        {{=titleLower}} = schema.load(request.json)\n        {{=titleLower}}.updated_by = current_user.id\n        session.merge({{=titleLower}})\n        session.flush()\n        return return_code.SUCCESS.d, 200\n$blankline\n\n    def post(self, id):\n        schema = {{=it.func.camel(titleLower,true) }}Schema(unknown=True)\n        {{=titleLower}} = schema.load(request.json)\n        {{=titleLower}}.updated_by = current_user.id\n        db.session.add({{=titleLower}})\n        db.session.flush()\n\n        return return_code.SUCCESS.d, 200\n$blankline\n\n    def delete(self, id):\n        {{=titleLower}} = {{=it.func.camel(titleLower,true) }}.query.get(id)\n        if {{=titleLower}}:\n            db.session.delete({{=titleLower}})\n            db.session.flush()\n        else:\n            return return_code.NOT_FOUND.d, 200\n\n        return return_code.SUCCESS.d, 200\n$blankline\n$blankline\nclass {{=it.func.camel(titleLower,true) }}List(Resource):\n    \"\"\"Creation and get_all\n\n    ---\n    get:\n      tags:\n        - api\n      responses:\n        200:\n          content:\n            application/json:\n              schema:\n                allOf:\n                  - $ref: '#/components/schemas/PaginatedResult'\n                  - type: object\n                    properties:\n                      results:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/{{=it.func.camel(titleLower,true) }}Schema'\n    post:\n      tags:\n        - api\n      requestBody:\n        content:\n          application/json:\n            schema:\n              {{=it.func.camel(titleLower,true) }}Schema\n      responses:\n        201:\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  msg:\n                    type: string\n                    example: {{=titleLower}} created\n                  {{=titleLower}}: {{=it.func.camel(titleLower,true) }}Schema\n    \"\"\"\n    method_decorators = [jwt_required]\n$blankline\n\n    def get(self):\n        schema = {{=it.func.camel(titleLower,true) }}Schema(unknown=True, many=True)\n        query = {{=it.func.camel(titleLower,true) }}.query\n        data = paginate(query, schema)\n        return return_code.SUCCESS.set_data(data).d, 200\n$blankline\n\n    def post(self):\n        schema = {{=it.func.camel(titleLower,true) }}Schema(unknown=True, many=True)\n        {{=titleLower}}s = schema.load(request.json)\n        for {{=titleLower}} in {{=titleLower}}s:\n            {{=titleLower}}.updated_by = current_user.id\n            {{=titleLower}}.org_code = current_user.org_code\n        db.session.add_all({{=titleLower}}s)\n        db.session.flush()\n\n        return return_code.SUCCESS.d, 200\n$blankline\n$blankline\n@{{=titleLower}}_bp.route('/{{=titleLower}}s/export', methods=['POST'])\n@jwt_required\ndef export_excel():\n    query_sets = {{=it.func.camel(titleLower,true) }}.query.all()\n    column_names = [{{~it.entity.fields:field:index}}'{{=it.func.lowerCase(field.name)}}', {{~}}]\n    colnames =  [{{~it.entity.fields:field:index}}'{{=field.chnname}}', {{~}}]\n    return excel.make_response_from_query_sets(query_sets, column_names, file_type=\"xlsx\",\n                                               file_name='{{=it.entity.chnname}}', sheet_name='{{=it.entity.chnname}}', colnames=colnames)\n\n$blankline\n$blankline\n@{{=titleLower}}_bp.route('/{{=titleLower}}s/list', methods=['POST'])\n@jwt_required\ndef query_list():\n    id = request.json.get('id', None)\n    date_type = request.json.get('dateType', None)\n    sort = request.args.get(\"sort\", None)\n    query = {{=it.func.camel(titleLower,true) }}.query. \\\n        with_entities({{~it.entity.fields:field:index}}{{=it.func.camel(titleLower,true) }}.{{=it.func.lowerCase(field.name)}}, {{~}})\n    if id:\n        query = query.filter_by(id=id)\n    if date_type:\n        query = query.filter_by(date_type=date_type)\n    if sort:\n        query = query.order_by(text(sort))\n    schema = {{=it.func.camel(titleLower,true) }}Schema(unknown=True, many=True)\n    data = schema.dump(query.all())\n    return return_code.SUCCESS.set_data(data).d, 200\n$blankline\n$blankline\n@{{=titleLower}}_bp.route('/{{=titleLower}}s/import', methods=['POST'])\n@jwt_required\ndef import_excel():\n    session = db.session\n    try:\n        column_names = [{{~it.entity.fields:field:index}}'{{=it.func.lowerCase(field.name)}}', {{~}}]\n        records = request.get_records(field_name='file', name_columns_by_row=-1, start_row=1, auto_detect_int=False, colnames=column_names)\n        db_util.increment_update(session=session,\n                                 data_dict_list=records,\n                                 schema_type={{=it.func.camel(titleLower,true) }}Schema,\n                                 is_src=False,\n                                 request_id=current_user.id)\n        session.flush()\n    except BaseException as e:\n        logger.exception(e)\n        return return_code.UNKNOWN_ERROR.set_data(e.args).d\n    return return_code.SUCCESS.d, 200\n$blankline\n$blankline",
        "rebuildTableTemplate": "",
        "deleteTableTemplate": "from vas.extensions import db\n\n\nclass {{=it.func.camel(it.entity.title,true) }}(db.Model):\n    \"\"\"{{=it.entity.chnname}} model\n    \"\"\"\n{{~it.entity.fields:field:index}}\n    {{=it.func.lowerCase(field.name)}} = db.Column(db.String(32),{{? field.pk }} primary_key=True,{{?}} comment='{{=it.func.join(field.chnname,field.remark,';')}}')\n{{~}}\n$blankline\n    def __init__(self, **kwargs):\n        super({{=it.func.camel(it.entity.title,true) }}, self).__init__(**kwargs)\n$blankline\n    def __repr__(self):\n        return \"<{{=it.func.camel(it.entity.title,true) }} %s>\" % self.username\n$blankline     \n    @property\n    def d(self):\n        return {\n            {{~it.entity.fields:field:index}}\n                \"{{=it.func.lowerCase(field.name)}}\": self.{{=it.func.lowerCase(field.name)}},\n            {{~}}\n        }",
        "createIndexTemplate": "{{ \nvar tmp = it.entity.title;\nvar titleLower = tmp.substr(tmp.indexOf(\"_\", tmp.indexOf(\"_\")+1)+1);\n}}\n# resources 下 init文件\nfrom .{{=titleLower}} import {{=it.func.camel(titleLower,true) }}Resource, {{=it.func.camel(titleLower,true) }}List\n    '{{=it.func.camel(titleLower,true) }}Resource', \n    '{{=it.func.camel(titleLower,true) }}List',\n$blankline\n# views文件\nfrom vas.api.resources import {{=it.func.camel(titleLower,true) }}Resource, {{=it.func.camel(titleLower,true) }}List\napi.add_resource({{=it.func.camel(titleLower,true) }}Resource, '/{{=titleLower}}/<int:id>')\napi.add_resource({{=it.func.camel(titleLower,true) }}List, '/{{=titleLower}}s')\n\n# app 文件\n app.register_blueprint(api.resources.{{=titleLower}}.{{=titleLower}}_bp)",
        "createFieldTemplate": ""
      },
      {
        "code": "VUE",
        "createTableTemplate": "<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n{{~it.entity.fields:field:index}}\n    <el-input v-model=\"listQuery.{{=it.func.camel(field.name)}}\" :placeholder=\"$t('{{=it.func.camel(it.entity.title,false) }}.{{=it.func.camel(field.name)}}')\" style=\"width: 200px;\" class=\"filter-item\" @keyup.enter.native=\"handleFilter\" />\n{{~}}\n      <el-button v-waves class=\"filter-item\" type=\"primary\" icon=\"el-icon-search\" @click=\"handleFilter\">\n        {\\{ $t('table.search') }}\n      </el-button>\n      <el-button class=\"filter-item\" style=\"margin-left: 10px;\" type=\"primary\" icon=\"el-icon-edit\" @click=\"handleCreate\">\n        {\\{ $t('table.add') }}\n      </el-button>\n      <el-button v-waves :loading=\"downloadLoading\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-download\" @click=\"handleDownload\">\n        {\\{ $t('table.export') }}\n      </el-button>\n      <el-button v-waves :loading=\"uploadLoading\" class=\"filter-item\" type=\"primary\" icon=\"el-icon-upload\" @click=\"handleUpload\">\n        {\\{ $t('common.import') }}\n      </el-button>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      v-loading=\"listLoading\"\n      :data=\"list\"\n      border\n      fit\n      highlight-current-row\n      style=\"width: 100%;\"\n      @sort-change=\"sortChange\"\n    >\n    {{~it.entity.fields:field:index}}\n\n      <el-table-column :label=\"$t('{{=it.func.camel(it.entity.title,false) }}.{{=it.func.camel(field.name)}}')\" prop=\"{{=it.func.camel(field.name)}}\" sortable=\"custom\" align=\"center\" :class-name=\"getSortClass('{{=it.func.camel(field.name)}}')\">\n        <template slot-scope=\"scope\">\n          <span>{\\{ scope.row.{{=it.func.camel(field.name)}} }}</span>\n        </template>\n      </el-table-column>\n    {{~}}\n      <el-table-column :label=\"$t('table.actions')\" align=\"center\" class-name=\"small-padding fixed-width\">\n        <template slot-scope=\"{row}\">\n          <el-button type=\"primary\" size=\"mini\" @click=\"handleUpdate(row)\">\n            {\\{ $t('table.edit') }}\n          </el-button>\n          <el-button v-if=\"row.status!='deleted'\" size=\"mini\" type=\"danger\" @click=\"handleDelete(row)\">\n            {\\{ $t('table.delete') }}\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <pagination v-show=\"total>0\" :total=\"total\" :page.sync=\"listQuery.page\" :limit.sync=\"listQuery.limit\" @pagination=\"getList\" />\n\n    <el-dialog :title=\"textMap[dialogStatus]\" :visible.sync=\"dialogFormVisible\">\n      <el-form ref=\"dataForm\" :rules=\"rules\" :model=\"temp\" label-position=\"left\" label-width=\"100px\" style=\"width: 400px; margin-left:50px;\">\n        {{~it.entity.fields:field:index}}\n        <el-form-item :label=\"$t('{{=it.func.camel(it.entity.title,false) }}.{{=it.func.camel(field.name)}}')\" prop=\"{{=it.func.camel(field.name)}}\">\n            <el-input v-model=\"temp.{{=it.func.camel(field.name)}}\" />\n        </el-form-item>\n        {{~}}\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogFormVisible = false\">\n          {\\{ $t('table.cancel') }}\n        </el-button>\n        <el-button type=\"primary\" @click=\"dialogStatus==='create'?createData():updateData()\">\n          {\\{ $t('table.confirm') }}\n        </el-button>\n      </div>\n    </el-dialog>\n    <el-dialog :visible.sync=\"dialogUploadVisible\" :title=\"$t('common.import')\">\n      <upload-excel upload-url=\"{{=it.entity.title}}s/import\" :before-upload=\"beforeUpload\" :on-success=\"handleSuccess\" />\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"dialogUploadVisible = false\">{\\{ $t('table.confirm') }}</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { fetchList, create{{=it.func.camel(it.entity.title,true) }}, update{{=it.func.camel(it.entity.title,true) }}, del{{=it.func.camel(it.entity.title,true) }}, exportExcel2 } from '@/api/{{=it.entity.title}}'\nimport waves from '@/directive/waves' // waves directive\nimport Pagination from '@/components/Pagination' // secondary package based on el-pagination\nimport UploadExcel from '@/components/UploadExcel/UploadExcel'\n\n\nexport default {\n  name: '{{=it.func.camel(it.entity.title,true) }}',\n  components: { Pagination, UploadExcel },\n  directives: { waves },\n  filters: {\n    dateTypeFilter(dateType) {\n      const dateTypeMap = {\n        0: 'info',\n        1: 'success'\n      }\n      return dateTypeMap[dateType]\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      list: null,\n      total: 0,\n      listLoading: true,\n      listQuery: {\n        page: 1,\n        limit: 20,\n        {{~it.entity.fields:field:index}}\n        {{=it.func.camel(field.name)}}: undefined,\n        {{~}}\n        sort: ''\n      },\n      showReviewer: false,\n      temp: {\n        {{~it.entity.fields:field:index}}\n        {{=it.func.camel(field.name)}}: '',\n        {{~}}\n      },\n      dialogFormVisible: false,\n      dialogStatus: '',\n      textMap: {\n        update: '编辑', // window.vm.$i18n.t('table.edit')\n        create: '增加'\n      },\n      dialogUploadVisible: false,\n      rules: {\n        {{~it.entity.fields:field:index}}  \n        {{=it.func.camel(field.name)}}: [{ required: true, message: '请输入{{=field.chnname}}', trigger: 'change' }],\n        {{~}}\n      },\n      downloadLoading: false,\n      uploadLoading: false\n    }\n  },\n  created() {\n    this.getList()\n  },\n  methods: {\n    getList() {\n      this.listLoading = true\n      fetchList(this.listQuery).then(response => {\n        this.list = response.data.items\n        this.total = response.data.total\n\n        // Just to simulate the time of the request\n        setTimeout(() => {\n          this.listLoading = false\n        }, 1.5 * 1000)\n      })\n    },\n    handleFilter() {\n      this.listQuery.page = 1\n      this.getList()\n    },\n    sortChange(data) {\n      const { prop, order } = data\n      if (prop === 'id') {\n        this.sortByID(order)\n      }\n    },\n    sortByID(order) {\n      if (order === 'ascending') {\n        this.listQuery.sort = '+id'\n      } else {\n        this.listQuery.sort = '-id'\n      }\n      this.handleFilter()\n    },\n    resetTemp() {\n      this.temp = {\n        {{~it.entity.fields:field:index}}\n        {{=it.func.camel(field.name)}}: '',\n        {{~}}\n      }\n    },\n    handleCreate() {\n      this.resetTemp()\n      this.dialogStatus = 'create'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    createData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          create{{=it.func.camel(it.entity.title,true) }}(this.temp).then(() => {\n            this.list.unshift(this.temp)\n            this.dialogFormVisible = false\n            this.$notify({\n              title: '成功',\n              message: '创建成功',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleUpdate(row) {\n      this.temp = Object.assign({}, row) // copy obj\n      this.dialogStatus = 'update'\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        this.$refs['dataForm'].clearValidate()\n      })\n    },\n    updateData() {\n      this.$refs['dataForm'].validate((valid) => {\n        if (valid) {\n          const tempData = Object.assign({}, this.temp)\n          update{{=it.func.camel(it.entity.title,true) }}(tempData).then(() => {\n            for (const v of this.list) {\n              if (v.id === this.temp.id) {\n                const index = this.list.indexOf(v)\n                this.list.splice(index, 1, this.temp)\n                break\n              }\n            }\n            this.dialogFormVisible = false\n            this.$notify({\n              title: '成功',\n              message: '更新成功',\n              type: 'success',\n              duration: 2000\n            })\n          })\n        }\n      })\n    },\n    handleDelete(row) {\n      this.$confirm('此操作将永久删除该记录, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        del{{=it.func.camel(it.entity.title,true) }}(row.id).then(() => {\n          this.$notify({\n            title: '成功',\n            message: '删除成功',\n            type: 'success',\n            duration: 2000\n          })\n          const index = this.list.indexOf(row)\n          this.list.splice(index, 1)\n        })\n      }).catch(() => {\n        this.$message({\n          type: 'info',\n          message: '已取消删除'\n        })\n      })\n    },\n    handleDownload() {\n      this.downloadLoading = true\n      exportExcel2(this.listQuery).then(excel => {\n        this.downloadLoading = false\n      })\n    },\n    handleUpload() {\n      this.dialogUploadVisible = true\n    },\n    beforeUpload(file) {\n      const isLt1M = file.size / 1024 / 1024 < 1\n\n      if (isLt1M) {\n        return true\n      }\n\n      this.$message({\n        message: 'Please do not upload files larger than 1m in size.',\n        type: 'warning'\n      })\n      return false\n    },\n    handleSuccess(res) {\n      this.handleFilter()\n      this.$message({\n        message: '导入成功',\n        type: 'success',\n        duration: 10 * 1000,\n        showClose: true\n      })\n      this.dialogUploadVisible = false\n    },\n    getSortClass: function(key) {\n      const sort = this.listQuery.sort\n      return sort === `+${key}`\n        ? 'ascending'\n        : sort === `-${key}`\n          ? 'descending'\n          : ''\n    }\n  }\n}\n</script>\n",
        "createIndexTemplate": "{{=it.func.camel(it.entity.title,false) }}: {\n\n{{~it.entity.fields:field:index}}\n    {{=it.func.camel(field.name,false)}}: '{{=it.func.join(field.chnname,field.remark,' ')}}',\n{{~}}\n}",
        "deleteTableTemplate": "import request from '@/utils/request'\nimport { saveAs } from 'file-saver'\nimport { parseTime } from '@/utils'\n\nexport function fetchList(query) {\n  return request({\n    url: '/{{=it.entity.title}}s',\n    method: 'get',\n    params: query\n  })\n}\n\nexport function fetch{{=it.func.camel(it.entity.title,true) }}(id) {\n  return request({\n    url: '/{{=it.entity.title}}/' + id,\n    method: 'get',\n    params: { id }\n  })\n}\n\nexport function del{{=it.func.camel(it.entity.title,true) }}(id) {\n  return request({\n    url: '/{{=it.entity.title}}/' + id,\n    method: 'delete',\n    params: { id }\n  })\n}\n\nexport function create{{=it.func.camel(it.entity.title,true) }}(data) {\n  return request({\n    url: '/{{=it.entity.title}}s',\n    method: 'post',\n    data\n  })\n}\n\nexport function update{{=it.func.camel(it.entity.title,true) }}(data) {\n  return request({\n    url: '/{{=it.entity.title}}/' + data.id,\n    method: 'put',\n    data\n  })\n}\n\nexport function exportExcel(data) {\n  return request({\n    url: '/{{=it.entity.title}}s/export',\n    method: 'post',\n    responseType: 'arraybuffer',\n    data\n  })\n    .then(response => {\n      const headers = response.headers\n      saveAs(new Blob([response.data], {\n        type: headers['content-type']\n      }), '{{=it.entity.chnname}}.xlsx')\n    })\n    .catch(function(error) {\n      console.log(error)\n    })\n}\n\nexport function exportExcel2(data) {\n  return request({\n    url: '/{{=it.entity.title}}s/list',\n    method: 'post',\n    data\n  }).then(response => {\n    import('@/vendor/Export2Excel').then(excel => {\n      const tHeader = [{{~it.entity.fields:field:index}}'{{=field.chnname}}', {{~}}]\n      const filterVal = [{{~it.entity.fields:field:index}}'{{=it.func.camel(field.name)}}', {{~}}]\n      const data = formatJson(filterVal, response.data)\n      excel.export_json_to_excel({\n        header: tHeader,\n        data,\n        filename: '{{=it.entity.chnname}}'\n      })\n    })\n  }).catch(function(error) {\n    console.log(error)\n  })\n}\n\nfunction formatJson(filterVal, jsonData) {\n  return jsonData.map(v => filterVal.map(j => {\n    if (j === 'timestamp') {\n      return parseTime(v[j])\n    } else {\n      return v[j]\n    }\n  }))\n}\n"
      },
      {
        "code": "JSON-API",
        "createTableTemplate": "{\n  \"code\": 200000,\n  \"data\": {\n    {{~it.entity.fields:field:index}}\n       \"{{=it.func.camel(field.name,false)}}\" : \"{{=it.func.camel(field.name,false)}}\",\n    {{~}}\n  },\n  \"msg\": \"成功\"\n}"
      }
    ]
  },
  "profile": {
    "defaultFields": [
      {
        "name": "id",
        "type": "Integer",
        "remark": "",
        "chnname": "主键",
        "pk": true,
        "notNull": true,
        "autoIncrement": true,
        "uiHint": "Number"
      },
      {
        "name": "org_code",
        "type": "DefaultString",
        "remark": "",
        "chnname": "机构代码"
      },
      {
        "name": "revision",
        "type": "Integer",
        "remark": "",
        "chnname": "乐观锁",
        "defaultValue": "1"
      },
      {
        "name": "created_time",
        "type": "DateTime",
        "remark": "",
        "chnname": "创建时间",
        "defaultValue": "CURRENT_TIMESTAMP"
      },
      {
        "name": "updated_by",
        "type": "IdOrKey",
        "remark": "",
        "chnname": "更新人"
      },
      {
        "name": "updated_time",
        "type": "DateTime",
        "remark": "",
        "chnname": "更新时间",
        "defaultValue": "CURRENT_TIMESTAMP"
      }
    ],
    "defaultFieldsType": "2",
    "javaConfig": {
      "JAVA_HOME": ""
    },
    "sqlConfig": ";",
    "dbs": [
      {
        "name": "local",
        "defaultDB": true,
        "properties": {
          "driver_class_name": "com.mysql.jdbc.Driver",
          "url": "jdbc:mysql://127.0.0.1:3306/app?characterEncoding=UTF-8&useSSL=false&useUnicode=true&serverTimezone=UTC",
          "password": "123456",
          "username": "root"
        }
      }
    ]
  }
}